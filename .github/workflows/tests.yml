name: Test

on:
  push:
    branches: [main]
  pull_request:
    # Check all PR

jobs:
  tests:
    runs-on: ${{ matrix.os }}
    name: Test on ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-20.04
          - os: macos-11
    steps:
      - uses: actions/checkout@v3

      - name: setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: install tests dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install tox

      - name: run C++ build and tests
        run: |
          mkdir build
          cd build
          cmake -DSPHERICART_BUILD_EXAMPLES=ON -DSPHERICART_BUILD_TESTS=ON ..
          cmake --build .
          ctest

      - name: run Python tests
        run: tox
        env:
          # Use the CPU only version of torch when building/running the code
          PIP_EXTRA_INDEX_URL: https://download.pytorch.org/whl/cpu

  # check that we can build Python wheels on any Python version
  python-build:
    runs-on: ubuntu-20.04
    name: check Python build
    strategy:
      matrix:
        python-version: ['3.7', '3.11']
    steps:
      - uses: actions/checkout@v3

      - name: set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: install python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install tox wheel

      - name: python build tests
        run: tox -e build-python

      - name: torch build tests
        run: tox -e build-torch
        env:
          # Use the CPU only version of torch when building/running the code
          PIP_EXTRA_INDEX_URL: https://download.pytorch.org/whl/cpu

  # check C/C++ formatting
  cpp-format:
    runs-on: ubuntu-latest
    name: check C/C++ formatting
      steps:
      - uses: actions/checkout@v3
      - run: |
          sudo apt-get install clang-format
          if ! git diff --exit-code --name-only origin/master...HEAD | grep -E '\.(c|cpp|h|hpp)$'; then
            exit 0
          fi

          for file in $(git diff --name-only origin/master...HEAD | grep -E '\.(c|cpp|h|hpp)$'); do
            clang-format -style=file -i "$file"
            if git diff --quiet "$file"; then
              echo "✅ $file is properly formatted."
            else
              echo "❌ $file is not properly formatted. Please run clang-format with `find . -name "*.c" -o -name "*.h" -o -name "*.cpp" -o -name "*.hpp" | xargs clang-format -i`."
              exit 1
            fi
          done
