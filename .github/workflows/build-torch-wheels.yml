name: Build Torch Wheels

on:
  push:
    branches: [main]
    tags: ["*"]
  pull_request:
    # Check all PR

#env:
#  SPHERICART_NO_LOCAL_DEPS: "1"

jobs:
  build-torch-wheels:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        cibw-arch: ["x86_64"]
        python-version: ["3.11", "3.12"]
        pytorch-version: ["2.4.1", "2.5.0"]
        cuda-version: ["12.4"]
    env:
      CIBW_SKIP: cp36-* cp37-* cp38-* cp39-* cp310-*
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Github Actions Envs Setup
      run: |
        CUVERSION="${{ matrix.cuda-version }}"
        PYTHONVERSION="${{ matrix.python-version }}"

        CU_VERSION_NO_DOT=${CUVERSION//./}
        echo CU_VERSION_NO_DOT=${CU_VERSION_NO_DOT} >> $GITHUB_ENV

        CU_VERSION_DASH=${CUVERSION//./-}
        echo CU_VERSION_DASH=${CU_VERSION_DASH} >> $GITHUB_ENV

        PYTHON_VER_NO_DOT=${PYTHONVERSION//./}
        echo PYTHON_VER_NO_DOT=${PYTHON_VER_NO_DOT} >> $GITHUB_ENV

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      with:
        platforms: all
  
    # Build the custom Manylinux Docker image
    - name: Build Manylinux Docker Image
      run: |
        docker build --no-cache \
        -t manylinux2014_"${{ matrix.cibw-arch }}" \
        --build-arg PYTHON_VER="${{ matrix.python-version }}" \
        --build-arg PYTHON_VER_NO_DOT="${{ env.PYTHON_VER_NO_DOT }}" \
        --build-arg CUDA_VER="${{ matrix.cuda-version }}" \
        --build-arg CUDA_VER_NO_DOT="${{ env.CU_VERSION_NO_DOT }}" \
        --build-arg CUDA_VER_DASH="${{ env.CU_VERSION_DASH }}" \
        --build-arg PYTORCH_VERSION="${{ matrix.pytorch-version }}" \
        scripts/manylinux2014_"${{ matrix.cibw-arch }}"
    
    - name: Install cibuildwheel
      run: python -m pip install cibuildwheel==2.22.0

    - name: Build torch wheels
      run: python -m cibuildwheel ./sphericart-torch
      env:
        CUDA_HOME: /usr/local/cuda
        PIP_EXTRA_INDEX_URL: "https://download.pytorch.org/whl/cu${{  env.CUVERSION }}"
        CIBW_BUILD_VERBOSITY: 3
        CIBW_BUILD: "cp${{ env.PYTHON_VER_NO_DOT }}-*"
        CIBW_BUILD_FRONTEND: "pip; args: --no-build-isolation --check-build-dependencies"
        CIBW_SKIP: "*-musllinux* *-win32 *-manylinux_i686"
        CIBW_ARCHS: "${{ matrix.cibw-arch }}"
        CIBW_MANYLINUX_X86_64_IMAGE: "manylinux2014_x86_64"
        CIBW_MANYLINUX_AARCH64_IMAGE: "manylinux2014_aarch64"
        CIBW_ENVIRONMENT: >
          CUDA_HOME=/usr/local/cuda
          PIP_EXTRA_INDEX_URL="https://download.pytorch.org/whl/cu${{  env.CUVERSION }}"
          SPHERICART_ARCH_NATIVE=OFF
        CIBW_REPAIR_WHEEL_COMMAND_LINUX: |
          auditwheel repair --exclude libc10.so --exclude libtorch.so --exclude libtorch_cpu.so --exclude libtorch_cuda.so --exclude libc10_cuda.so  -w {dest_dir} {wheel}
    
    - uses: actions/upload-artifact@v4
      with:
        name: "sphericart-torch-py-${{ env.PYTHON_VER_NO_DOT }}-torch-${{matrix.pytorch-version}}+cu${{ env.CU_VERSION_NO_DOT }}-${{ matrix.cibw-arch }}"
        path: ./wheelhouse/*.whl

    # - name: Build wheels
    #   uses: pypa/cibuildwheel@v2.22.0
    #   env:
    #     CUDA_HOME: /usr/local/cuda
    #     PIP_EXTRA_INDEX_URL: "https://download.pytorch.org/whl/cu${{  env.CUVERSION }}"
    #     CIBW_BUILD_VERBOSITY: 3
    #     CIBW_BUILD: "cp${{ env.PYTHON_VER_NO_DOT }}-*"
    #     CIBW_BUILD_FRONTEND: "pip; args: --no-build-isolation"
    #     CIBW_SKIP: "*-musllinux* *-win32 *-manylinux_i686"
    #     CIBW_ARCHS: "${{ matrix.cibw-arch }}"
    #     CIBW_MANYLINUX_X86_64_IMAGE: "manylinux2014_${{ matrix.cibw-arch }}"
    #     CIBW_ENVIRONMENT: >
    #       CUDA_HOME=/usr/local/cuda
    #       PIP_EXTRA_INDEX_URL="https://download.pytorch.org/whl/cu${{  env.CUVERSION }}"
    #     CIBW_REPAIR_WHEEL_COMMAND_LINUX: |
    #       auditwheel repair --exclude libcuda.so --exclude libcuda.so.1 --exclude libc10.so --exclude libtorch.so --exclude libtorch_cpu.so --exclude libtorch_cuda.so --exclude libc10_cuda.so  --exclude libcudart.so --exclude libnvToolsExt.so  --exclude libnvrtc.so --exclude libnvrtc.so.12 -w {dest_dir} {wheel}

  # merge-torch-wheels:
  #   needs: build-torch-wheels
  #   runs-on: ubuntu-22.04
  #   name: merge sphericart-torch ${{ matrix.name }}
  #   strategy:
  #     matrix:
  #       include:
  #         - name: x86_64 Linux
  #           os: ubuntu-22.04
  #           arch: x86_64
  #         - name: arm64 Linux
  #           os: ubuntu-22.04
  #           arch: aarch64
  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Download wheels
  #       uses: actions/download-artifact@v4
  #       with:
  #         pattern: torch-single-version-wheel-*-${{ matrix.os }}-${{ matrix.arch }}
  #         merge-multiple: false
  #         path: dist

  #     - name: Set up Python
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: "3.12"

  #     - name: install dependencies
  #       run: python -m pip install twine wheel

  #     - name: merge wheels
  #       run: |
  #         # collect all torch versions used for the build
  #         REQUIRES_TORCH=$(find dist -name "*.whl" -exec unzip -p {} "sphericart_torch-*.dist-info/METADATA" \; | grep "Requires-Dist: torch")
  #         MERGED_TORCH_REQUIRE=$(python scripts/create-torch-versions-range.py "$REQUIRES_TORCH")

  #         echo MERGED_TORCH_REQUIRE=$MERGED_TORCH_REQUIRE

  #         # unpack all single torch versions wheels in the same directory
  #         mkdir dist/unpacked
  #         find dist -name "*.whl" -print -exec python -m wheel unpack --dest dist/unpacked/ {} ';'

  #         sed -i "s/Requires-Dist: torch.*/$MERGED_TORCH_REQUIRE/" dist/unpacked/sphericart_torch-*/sphericart_torch-*.dist-info/METADATA

  #         echo "\n\n METADATA = \n\n"
  #         cat dist/unpacked/sphericart_torch-*/metatensor_torch-*.dist-info/METADATA

  #         # check the right metadata was added to the file. grep will exit with
  #         # code `1` if the line is not found, which will stop CI
  #         grep "$MERGED_TORCH_REQUIRE" dist/unpacked/sphericart_torch-*/sphericart_torch-*.dist-info/METADATA

  #         # repack the directory as a new wheel
  #         mkdir wheelhouse
  #         python -m wheel pack --dest wheelhouse/ dist/unpacked/*

  #     - name: check wheels with twine
  #       run: twine check wheelhouse/*

  #     - uses: actions/upload-artifact@v4
  #       with:
  #         name: torch-wheel-${{ matrix.os }}-${{ matrix.arch }}
  #         path: ./wheelhouse/*.whl
