name: Build Torch Wheels

on:
  push:
    branches: [main]
    tags: ["*"]
  pull_request:
    # Check all PR

#env:
#  SPHERICART_NO_LOCAL_DEPS: "1"

jobs:
  build-torch-wheels:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: ["x86_64"]
        python-version: ["3.12"]
        pytorch-version: ["2.4.1", "2.5.1"]
    env:
      CIBW_BUILD: cp312
    name: "torch-cuda-wheel ${{matrix.os}} ${{matrix.arch}} python=${{matrix.python-version}} torch=${{matrix.pytorch-version}}"
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Github Actions Envs Setup
      run: |
        PYTHONVERSION="${{ matrix.python-version }}"

        PYTHON_VER_NO_DOT=${PYTHONVERSION//./}
        echo PYTHON_VER_NO_DOT=${PYTHON_VER_NO_DOT} >> $GITHUB_ENV

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      with:
        platforms: all
  
    # Build the custom Manylinux Docker image
    - name: Build Manylinux Docker Image
      run: |
        docker build --no-cache \
        -t sphericart_manylinux2014_"${{ matrix.arch }}" \
        --build-arg PYTHON_VER="${{ matrix.python-version }}" \
        --build-arg PYTHON_VER_NO_DOT="${{ env.PYTHON_VER_NO_DOT }}" \
        --build-arg PYTORCH_VERSION="${{ matrix.pytorch-version }}" \
        scripts/manylinux2014_"${{ matrix.arch }}"
    
    - name: Install cibuildwheel
      run: python -m pip install cibuildwheel==2.22.0

    - name: Build torch wheels
      run: python -m cibuildwheel ./sphericart-torch
      env:
        SPHERICART_ARCH_NATIVE: OFF
        TORCH_CUDA_ARCH_LIST: "8.0 8.6 8.9 9.0"
        SPHERICART_TORCH_BUILD_WITH_TORCH_VERSION: ${{ matrix.pytorch-version }}
        CUDA_HOME: /usr/local/cuda
        CIBW_BUILD_VERBOSITY: 3
        CIBW_BUILD: "cp${{ env.PYTHON_VER_NO_DOT }}-*"
        CIBW_BUILD_FRONTEND: "pip; args: --no-build-isolation --check-build-dependencies"
        CIBW_SKIP: "*-musllinux* *-win32 *-manylinux_i686"
        CIBW_ARCHS: "${{ matrix.arch }}"
        CIBW_MANYLINUX_X86_64_IMAGE: "sphericart_manylinux2014_x86_64"
        CIBW_MANYLINUX_AARCH64_IMAGE: "sphericart_manylinux2014_aarch64"
        CIBW_REPAIR_WHEEL_COMMAND_LINUX: |
          auditwheel repair \
          --exclude libc10.so \
          --exclude libtorch.so \
          --exclude libtorch_cpu.so \
          --exclude libtorch_cuda.so \
          --exclude libc10_cuda.so  \
          -w {dest_dir} {wheel}
    
    - uses: actions/upload-artifact@v4
      with:
        name: torch-single-version-wheel-${{ matrix.pytorch-version }}-${{ matrix.arch }}
        path: ./wheelhouse/*.whl

  merge-torch-wheels:
    needs: build-torch-wheels
    runs-on: ubuntu-22.04
    name: merge sphericart-torch ${{ matrix.name }}
    strategy:
      matrix:
        include:
          - name: x86_64 Linux
            os: ubuntu-22.04
            arch: x86_64
    steps:
      - uses: actions/checkout@v4

      - name: Download wheels
        uses: actions/download-artifact@v4
        with:
          pattern: torch-single-version-wheel-*-${{ matrix.arch }}
          merge-multiple: false
          path: dist

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: install dependencies
        run: python -m pip install twine wheel

      - name: merge wheels
        run: |
          # collect all torch versions used for the build
          REQUIRES_TORCH=$(find dist -name "*.whl" -exec unzip -p {} "sphericart_torch-*.dist-info/METADATA" \; | grep "Requires-Dist: torch")
          MERGED_TORCH_REQUIRE=$(python scripts/create-torch-versions-range.py "$REQUIRES_TORCH")

          echo MERGED_TORCH_REQUIRE=$MERGED_TORCH_REQUIRE

          # unpack all single torch versions wheels in the same directory
          mkdir dist/unpacked
          find dist -name "*.whl" -print -exec python -m wheel unpack --dest dist/unpacked/ {} ';'

          sed -i "s/Requires-Dist: torch.*/$MERGED_TORCH_REQUIRE/" dist/unpacked/sphericart_torch-*/sphericart_torch-*.dist-info/METADATA

          echo "\n\n METADATA = \n\n"
          cat dist/unpacked/sphericart_torch-*/sphericart_torch-*.dist-info/METADATA

          # check the right metadata was added to the file. grep will exit with
          # code `1` if the line is not found, which will stop CI
          grep "$MERGED_TORCH_REQUIRE" dist/unpacked/sphericart_torch-*/sphericart_torch-*.dist-info/METADATA

          # repack the directory as a new wheel
          mkdir wheelhouse
          python -m wheel pack --dest wheelhouse/ dist/unpacked/*

      - name: check wheels with twine
        run: twine check wheelhouse/*

      - uses: actions/upload-artifact@v4
        with:
          name: sphericart-torch-wheel-${{ matrix.arch }}
          path: ./wheelhouse/*.whl
